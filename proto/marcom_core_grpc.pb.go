// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: marcom_core.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MarcomService_StartSimulation_FullMethodName           = "/simulation.MarcomService/StartSimulation"
	MarcomService_PauseSimulation_FullMethodName           = "/simulation.MarcomService/PauseSimulation"
	MarcomService_StreamSimulationUpdates_FullMethodName   = "/simulation.MarcomService/StreamSimulationUpdates"
	MarcomService_ResearchProductCompetitor_FullMethodName = "/simulation.MarcomService/ResearchProductCompetitor"
)

// MarcomServiceClient is the client API for MarcomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarcomServiceClient interface {
	StartSimulation(ctx context.Context, in *SimulationRequest, opts ...grpc.CallOption) (*SimulationResponse, error)
	PauseSimulation(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*PauseResponse, error)
	StreamSimulationUpdates(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SimulationUpdate], error)
	ResearchProductCompetitor(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ProductCompetitorResponse, error)
}

type marcomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMarcomServiceClient(cc grpc.ClientConnInterface) MarcomServiceClient {
	return &marcomServiceClient{cc}
}

func (c *marcomServiceClient) StartSimulation(ctx context.Context, in *SimulationRequest, opts ...grpc.CallOption) (*SimulationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimulationResponse)
	err := c.cc.Invoke(ctx, MarcomService_StartSimulation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marcomServiceClient) PauseSimulation(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*PauseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PauseResponse)
	err := c.cc.Invoke(ctx, MarcomService_PauseSimulation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marcomServiceClient) StreamSimulationUpdates(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SimulationUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MarcomService_ServiceDesc.Streams[0], MarcomService_StreamSimulationUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamRequest, SimulationUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarcomService_StreamSimulationUpdatesClient = grpc.ServerStreamingClient[SimulationUpdate]

func (c *marcomServiceClient) ResearchProductCompetitor(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ProductCompetitorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductCompetitorResponse)
	err := c.cc.Invoke(ctx, MarcomService_ResearchProductCompetitor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarcomServiceServer is the server API for MarcomService service.
// All implementations must embed UnimplementedMarcomServiceServer
// for forward compatibility.
type MarcomServiceServer interface {
	StartSimulation(context.Context, *SimulationRequest) (*SimulationResponse, error)
	PauseSimulation(context.Context, *PauseRequest) (*PauseResponse, error)
	StreamSimulationUpdates(*StreamRequest, grpc.ServerStreamingServer[SimulationUpdate]) error
	ResearchProductCompetitor(context.Context, *Product) (*ProductCompetitorResponse, error)
	mustEmbedUnimplementedMarcomServiceServer()
}

// UnimplementedMarcomServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMarcomServiceServer struct{}

func (UnimplementedMarcomServiceServer) StartSimulation(context.Context, *SimulationRequest) (*SimulationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSimulation not implemented")
}
func (UnimplementedMarcomServiceServer) PauseSimulation(context.Context, *PauseRequest) (*PauseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseSimulation not implemented")
}
func (UnimplementedMarcomServiceServer) StreamSimulationUpdates(*StreamRequest, grpc.ServerStreamingServer[SimulationUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method StreamSimulationUpdates not implemented")
}
func (UnimplementedMarcomServiceServer) ResearchProductCompetitor(context.Context, *Product) (*ProductCompetitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResearchProductCompetitor not implemented")
}
func (UnimplementedMarcomServiceServer) mustEmbedUnimplementedMarcomServiceServer() {}
func (UnimplementedMarcomServiceServer) testEmbeddedByValue()                       {}

// UnsafeMarcomServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarcomServiceServer will
// result in compilation errors.
type UnsafeMarcomServiceServer interface {
	mustEmbedUnimplementedMarcomServiceServer()
}

func RegisterMarcomServiceServer(s grpc.ServiceRegistrar, srv MarcomServiceServer) {
	// If the following call pancis, it indicates UnimplementedMarcomServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MarcomService_ServiceDesc, srv)
}

func _MarcomService_StartSimulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimulationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarcomServiceServer).StartSimulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarcomService_StartSimulation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarcomServiceServer).StartSimulation(ctx, req.(*SimulationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarcomService_PauseSimulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarcomServiceServer).PauseSimulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarcomService_PauseSimulation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarcomServiceServer).PauseSimulation(ctx, req.(*PauseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarcomService_StreamSimulationUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarcomServiceServer).StreamSimulationUpdates(m, &grpc.GenericServerStream[StreamRequest, SimulationUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarcomService_StreamSimulationUpdatesServer = grpc.ServerStreamingServer[SimulationUpdate]

func _MarcomService_ResearchProductCompetitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarcomServiceServer).ResearchProductCompetitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarcomService_ResearchProductCompetitor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarcomServiceServer).ResearchProductCompetitor(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

// MarcomService_ServiceDesc is the grpc.ServiceDesc for MarcomService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarcomService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simulation.MarcomService",
	HandlerType: (*MarcomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartSimulation",
			Handler:    _MarcomService_StartSimulation_Handler,
		},
		{
			MethodName: "PauseSimulation",
			Handler:    _MarcomService_PauseSimulation_Handler,
		},
		{
			MethodName: "ResearchProductCompetitor",
			Handler:    _MarcomService_ResearchProductCompetitor_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSimulationUpdates",
			Handler:       _MarcomService_StreamSimulationUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "marcom_core.proto",
}
